<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_class_angle_to_player">AngleToPlayer</link>
<para>This script calculates the angle between the enemy and the player to determine animation direction </para>
<link linkend="_class_cinema_manager">CinemaManager</link>
<para>This script manages the state of the cinema puzzle </para>
<link linkend="_class_door_interactable">DoorInteractable</link>
<para>Controls door interaction, requiring a specific item to open/close. Implements the <link linkend="_interface_i_interactable">IInteractable</link> interface </para>
<link linkend="_class_enemy_distance_controller">EnemyDistanceController</link>
<para>Controls the enemy&apos;s behavior based on the player&apos;s distance and vision </para>
<link linkend="_class_enemy_melee_controller">EnemyMeleeController</link>
<para>Controls the melee enemy&apos;s behavior based on the player&apos;s distance and vision </para>
<link linkend="_class_enemy_sprite_look">EnemySpriteLook</link>
<para>This script allows the enemy&apos;s sprite to always face the player </para>
<link linkend="_class_game_manager">GameManager</link>
<para>Controls the pause menu, scene changes, and quitting the game </para>
<link linkend="_class_game_texts">GameTexts</link>
<para>This class allows you to create an asset with the different texts present in the game </para>
<link linkend="_class_holder_interactable">HolderInteractable</link>
<para>Allows assigning a holder as a puzzle objective and placing objects on it </para>
<link linkend="_interface_i_interactable">IInteractable</link>
<para>Defines the standard interface for objects that can be interacted with by the the player </para>
<link linkend="_class_inspect_interactable">InspectInteractable</link>
<para>Provides inspection functionality for examinable objects in the game world. Displays custom thoughts when the interacts with the object </para>
<link linkend="_class_inventory_manager">InventoryManager</link>
<para>Manages the inventory, UI, and special item logic (such as pieces) </para>
<link linkend="_interface_i_puzle_objective">IPuzleObjective</link>
<para>Interface to implement an objective to be completed for a minigame </para>
<link linkend="_class_item">Item</link>
<para>Defines inventory items as ScriptableObjects for easy asset creation and management. Used for both 2D UI representations and 3D in-game objects </para>
<link linkend="_class_item_interactable">ItemInteractable</link>
<para>Represents an interactable item that can be collected by the the player. Implements the <link linkend="_interface_i_interactable">IInteractable</link> interface for interaction handling </para>
<link linkend="_class_mouse_look">MouseLook</link>
<para>Handles first-person mouse look for both the player body and the camera. Disables look controls when the inventory is open </para>
<link linkend="_class_player_controller">PlayerController</link>
<para>This script handles the player&apos;s controls </para>
<link linkend="_class_p_s2_interactable">PS2Interactable</link>
<para>Controls PS2 puzzle interaction, DVD verification, and reward system. Implements both interactable and puzzle objective interfaces </para>
<link linkend="_class_puzle_manager">PuzleManager</link>
<para>This script manages the state of a minigame based on its assigned objectives </para>
<link linkend="_class_stats">Stats</link>
<para>Manages the player&apos;s health and sanity, UI, and world corruption effects </para>
<link linkend="_class_u_i_text_controller">UITextController</link>
<para>Controls the UI text messages for interaction, thoughts, and inventory </para>
</section>
